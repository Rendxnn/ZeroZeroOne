Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

# Leer el mensaje del commit
$commitMsgFile = ".git/COMMIT_EDITMSG"
if (-not (Test-Path $commitMsgFile)) {
    Write-Host "No se encontró el archivo del mensaje del commit."
    exit 0
}

$commitMsg = Get-Content $commitMsgFile -Raw

# Buscar m:[minutos] y o:[observacion]
$mMatch = [regex]::Match($commitMsg, "m:(\d+)")
$oMatch = [regex]::Match($commitMsg, "o:([^\]]+)")

if ($mMatch.Success) {
    $m = $mMatch.Groups[1].Value
} else {
    Write-Host "No se registrarán horas: no se especificó 'm:[minutos]' en el mensaje del commit."
    exit 0
}

# Validar minutos
if (-not ($m -as [int]) -or [int]$m -le 0) {
    Write-Host "No se registrarán horas: el valor de minutos es inválido."
    exit 0
}

# Obtener la observación
if ($oMatch.Success) {
    $o = $oMatch.Groups[1].Value.Trim()
} else {
    $o = $commitMsg.Trim()
}

# Mostrar parámetros
Write-Host "Minutos: $m"
Write-Host "Observación: $o"

# ---------------------
# LOGIN
$zeroOneLoginUrl = "https://api.zeroone.la/api/auth/login"
$bodyLogin = @{
    email = "{{ZeroOneUser}}"
    password = "{{ZeroOnePassword}}"
    EmpresaId = "{{CompanyId}}"
} | ConvertTo-Json -Depth 10

$headersLogin = @{
    "Content-Type" = "application/json"
}

$loginResponse = Invoke-WebRequest -Uri $zeroOneLoginUrl -Method POST -Headers $headersLogin -Body $bodyLogin
$token = ""

if ($loginResponse.StatusCode -eq 200) {
    Write-Host "Login exitoso"
    $responseContent = $loginResponse.Content | ConvertFrom-Json
    $token = $responseContent.token
} else {
    Write-Host "Error al enviar petición: $($loginResponse.StatusCode) $($loginResponse.StatusDescription)"
    exit 1
}

# ---------------------
# PETICIÓN HORAS
$vistaHoras = "https://api.zeroone.la/api/vistas/5f5962bf-fbb5-4543-0ea4-08da32d06ff0"
$horasHeaders = @{
    "Content-Type" = "application/json"
    "Authorization" = "Bearer $token"
}

$bodyHoras = @{
    dato = @{
        ProyectoId = "{{ProjectId}}"
        ActividadId = "{{ActivityId}}"
        ClienteId = "{{ClientId}}"
        Fecha = "{{Date}}"  # Debes reemplazar esto dinámicamente si quieres la fecha actual
        Horas = $m
        Observacion = $o
    }
} | ConvertTo-Json -Depth 10

$horasResponse = Invoke-WebRequest -Uri $vistaHoras -Method POST -Headers $horasHeaders -Body $bodyHoras

Write-Host "Código de estado: $($horasResponse.StatusCode)"
if ($horasResponse.Content) {
    Write-Host "Contenido de la respuesta:"
    $horasResponse.Content | ConvertFrom-Json | Format-List
} else {
    Write-Host "No se recibió contenido en la respuesta."
}
